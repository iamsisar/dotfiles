# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png
# Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles
# iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing.

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM='xterm-256color';
fi;

prompt_git() {
	local s='';
	local branchName='';

	# check if we're in a git repo. (fast)
	git rev-parse --is-inside-work-tree &>/dev/null || return

	# check for what branch we're on. (fast)
	#   if… HEAD isn’t a symbolic ref (typical branch),
	#   then… get a tracking remote branch or tag
	#   otherwise… get the short SHA for the latest commit
	#   lastly just give up.
	branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
		git describe --all --exact-match HEAD 2> /dev/null || \
		git rev-parse --short HEAD 2> /dev/null || \
		echo '(unknown)')";

	# Ensure the index is up to date.
	git update-index --really-refresh -q &>/dev/null;

	# Check for uncommitted changes in the index.
	if ! $(git diff --quiet --ignore-submodules --cached); then
		s+='+';
	fi;

	# Check for unstaged changes.
	if ! $(git diff-files --quiet --ignore-submodules --); then
		s+='!';
	fi;

	# Check for untracked files.
	if [ -n "$(git ls-files --others --exclude-standard)" ]; then
		s+='?';
	fi;

	# Check for stashed files.
	if $(git rev-parse --verify refs/stash &>/dev/null); then
		s+='$';
	fi;


	# Get the short symbolic ref.
	# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
	# Otherwise, just give up.
	branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
		git rev-parse --short HEAD 2> /dev/null || \
		echo '(unknown)')";

	[ -n "${s}" ] && s=" [${s}]";

	echo -e "${1}${branchName}${2}${s}";

}

# Credit to kristopherjohnson 
# https://gist.github.com/kristopherjohnson/8333cd11ffca211e1cb1
hg_prompt() {
	local summary=$(hg summary 2>/dev/null)
	if [[ -z $summary ]]; then return; fi

	local branchName=$(echo "$summary" | sed -E -n '/^branch: ([^ ]+).*$/ s//\1/p')

	local bookmark=$(echo "$summary" | sed -E -n '/^bookmarks: \*([^ ]+).*$/ s//:\1/p')

	local commit=$(echo "$summary" | sed -n '/^commit: .*$/p')

	local s='';

	s+=$(echo "$commit" | sed -n '/.*modified.*/ s//*/p')
	s+=$(echo "$commit" | sed -n '/.*unknown.*/  s//?/p')
	s+=$(echo "$commit" | sed -n '/.*added.*/    s//+/p')
	s+=$(echo "$commit" | sed -n '/.*removed.*/  s//-/p')

	[ -n "${s}" ] && s=" [${s}]";

	echo -e "${1}${branchName}${bookmark}${qtop}${2}${s}";
}

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${red}";
else
	userStyle="${WHITE}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${bold}${red}";
else
	hostStyle="${WHITE}";
fi;

# Set the terminal title to the current working directory.
PS1="\[${bold}\]\n"; 			# newline
PS1+="\[${userStyle}\]\u"; 		# username
PS1+="\[${WHITE}\] @ ";			# @
PS1+="\[${hostStyle}\]\h";		# host
PS1+="\[${WHITE}\] in ";		# in
PS1+="\[${LIGHT_GREEN}\]\w"; 	# working directory
PS1+="\$(prompt_git \"\[${WHITE}\] on \[${VIOLET}\]\" \"\[${BLUE}\]\")"; # Git repository details
PS1+="\$(hg_prompt \"\[${DARK_GREY}\] ☿\[${WHITE}\] on \[${VIOLET}\]\" \"\[${BLUE}\]\")";

PS1+="\[${NONE}\]\n"; # newline and reset color
PS1+="\[${NONE}\]\$ "; # `$`
export PS1;

PS2="\[${yellow}\]→ \[${NONE}\]";
export PS2;

